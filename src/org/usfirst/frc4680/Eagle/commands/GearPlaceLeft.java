// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4680.Eagle.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4680.Eagle.Robot;

/**
 *
 */
public class GearPlaceLeft extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	double startDistance;
	double turnDistance;
	double finishDistance;
	double extraDistance;
	int step;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GearPlaceLeft() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        step = 0;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	startDistance = Robot.drive.getDistance();
    	turnDistance = startDistance + 73.0;
    	finishDistance = turnDistance + 40.0;
    	extraDistance = finishDistance + 10.0;

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double currentDistance = Robot.drive.getDistance();
    	
    	switch(step) {
    	case 0:
    		Robot.drive.driveStraight(0.4, 0);
    		if(currentDistance > turnDistance) {
    			System.out.println("step 1");
    			step = 1;
    		}
    		break;
    		
    	case 1:
    		boolean doneTurning = Robot.drive.turnTo(-70);
    		if( doneTurning){
    			System.out.println("step 2");
    			step = 2;
    		}
    		break;
    		
    	case 2:
    		Robot.drive.driveStraight(0.40, -70);
    		if(currentDistance > finishDistance){
    			step = 3;
    		}
    		break;
    	case 3 :
    		Robot.drive.driveStraight(0.10,  -70);
    		if(currentDistance > extraDistance){
    			step = 4;
    		}
    		break;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return step == 4;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
