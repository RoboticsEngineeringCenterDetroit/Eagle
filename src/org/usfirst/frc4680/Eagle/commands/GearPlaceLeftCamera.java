// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4680.Eagle.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4680.Eagle.Robot;

/**
 *
 */
public class GearPlaceLeftCamera extends Command {

	private static final double drive_speed = 0.45;
	private static final double time_limit = 11.0;
	double startDistance;
	double turnDistance;
	double finishDistance;
	double extraDistance;
	double heading;
	double turn_speed;
	int step;

	public GearPlaceLeftCamera() {
		requires(Robot.drive);
		step = 0;
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		startDistance = Robot.drive.getDistance();
		turnDistance = startDistance + 73.0;
		finishDistance = turnDistance + 40.0;
		extraDistance = finishDistance + 10.0;
		heading = -70;
		turn_speed = 0.7;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		double currentDistance = Robot.drive.getDistance();

		switch(step) {
		case 0: // drive straight, first segment
			Robot.drive.driveStraight(drive_speed, 0);
			if(currentDistance > turnDistance) {
				System.out.println("finished first segment");
				step = 1;
			}
			break;

		case 1: // turn to face airship
			boolean doneTurning = Robot.drive.turnTo(heading);
			if(doneTurning){
				System.out.println("done turning");
				step = 2;
			}
			break;

		case 2: // turn left to find target
			if(DriverStation.getInstance().getMatchTime() < time_limit) {
				Robot.drive.stop();
				System.out.println("time's up!");
				step = 4;
			} else if(Robot.camera_turn_left.get()) {
				Robot.drive.robotDrive41.tankDrive(0, turn_speed);
			} else if(Robot.camera_centered.get()) {
				heading = Robot.drive.getHeading();
				System.out.println("locked on target. heading = " + heading);
				Robot.drive.stop();
				step = 4;
			} else if(Robot.camera_turn_right.get()) {
				System.out.println("i see the target to the right");
				turn_speed *= 0.9;
				heading = Robot.drive.getHeading();
				step = 3;
			} else {
				System.out.println("looking for target...");
			}
			break;

		case 3: // turn right to find target
			if(DriverStation.getInstance().getMatchTime() < time_limit) {
				Robot.drive.stop();
				System.out.println("time's up!");
				step = 4;
			} else if(Robot.camera_turn_right.get()) {
				Robot.drive.robotDrive41.tankDrive(turn_speed, 0);
			} else if(Robot.camera_centered.get()) {
				heading = Robot.drive.getHeading();
				Robot.drive.stop();
				step = 4;
			} else if(Robot.camera_turn_left.get()) {
				System.out.println("i see the target to the left");
				turn_speed *= 0.9;
				heading = Robot.drive.getHeading();
				step = 2;
			} else {
				System.out.println("looking for target...");
			}
			break;

		case 4: // drive forward second segment
			Robot.drive.driveStraight(drive_speed, heading);
			if(currentDistance > finishDistance){
				step = 5;
			}
			break;

		case 5 : // creep forward to stay pressed against airship
			Robot.drive.driveStraight(0.10, heading);
			if(currentDistance > extraDistance){
				step = 6;
			}
			break;
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return step == 6;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drive.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
