// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4680.Eagle.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4680.Eagle.Robot;

/**
 *
 */
public class DriveDirectionDistance extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	double finishDistance;
	double direction;
	double delta;
	double speed;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveDirectionDistance() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }
    
    public DriveDirectionDistance(double dist, double dir) {
    		delta = dist;
    		direction = dir;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    		speed = Math.signum(delta);
    		finishDistance = Robot.drive.getDistance() + delta;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    		double absDistanceRemaining = Math.abs(finishDistance - Robot.drive.getDistance());
    		
    		if(absDistanceRemaining < 50.0) {
    			double limit = Math.max(0.1, absDistanceRemaining/50.0);
    			speed = Math.min(speed, limit);
    			speed = Math.max(speed, -limit);
    		}
 
    		Robot.drive.driveStraight(speed, direction);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(Math.abs(finishDistance - Robot.drive.getDistance()) <= 1.0 ) {
        		return true;
        } else {
        		return false;
        }
    }

    // Called once after isFinished returns true
    protected void end() {
    		Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
